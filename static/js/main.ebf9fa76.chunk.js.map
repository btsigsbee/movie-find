{"version":3,"sources":["logo.svg","components/searchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieResults","props","results","map","mr","Row","className","key","imdbID","Col","src","Poster","alt","Title","Year","Button","fluid","onClick","removeItem","size","searchBar","handleChange","event","searchTerm","chr","target","value","setState","searchValue","handleKeyPress","preventDefault","handleSubmit","search","state","axios","get","then","response","data","_","uniqBy","Search","searchResults","console","log","catch","err","bind","id","this","filter","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,uNCOrCC,EAAa,SAACC,GAChB,IACMC,EADSD,EACQA,MAAME,KAAI,SAACC,GAAD,OAE7B,kBAACC,EAAA,EAAD,CAAKC,UAAU,+GAA+GC,IAAKH,EAAGI,QAClI,kBAACC,EAAA,EAAD,CAAKH,UAAU,wBAAuB,yBAAKA,UAAU,4BAA2BI,IAAKN,EAAGO,OAAQC,IAAI,0BACpG,kBAACH,EAAA,EAAD,CAAKH,UAAU,mCAAkC,wBAAIA,UAAU,uBAAuBF,EAAGS,MAAM,wBAAIP,UAAU,cAAd,IAA6BF,EAAGU,KAAhC,MAC/F,kBAACC,EAAA,EAAD,CAASC,OAAK,EAACV,UAAU,oDAAmDW,QAAS,kBAAMhB,EAAMiB,WAAWd,EAAGI,UAAS,uBAAGF,UAAU,4BAAb,SAA8C,kBAAC,IAAD,CAAYa,KAAM,YAShM,OACI,6BAAMjB,IA4ECkB,E,kDAxEX,WAAYnB,GAAO,IAAD,8BACd,cAAMA,IAYVoB,aAAa,SAACC,GACV,IAAIC,EAAW,GACf,IAAK,IAAIC,KAAOF,EAAMG,OAAOC,MACM,MAA5BJ,EAAMG,OAAOC,MAAMF,GAClBD,GAAY,IAEhBA,GAAYD,EAAMG,OAAOC,MAAMF,GAInC,EAAKG,SAAS,CAACC,YAAaL,KAvBd,EAkClBM,eAAe,SAACP,GAEK,UAAbA,EAAMf,MACNe,EAAMQ,iBACN,EAAKC,iBAtCK,EA0ClBA,aAAa,SAACT,GACVA,EAAMQ,iBACN,IAAIE,EAAS,EAAKC,MAAML,YACxBM,IAAMC,IAAI,8CAA8CH,GACvDI,MAAK,SAAAC,GACJ,IAAIC,EAAOC,IAAEC,OAAOH,EAASC,KAAKG,OAAQ,UACxC,EAAKd,SAAS,CAACe,cAAcJ,GAAMK,QAAQC,IAAI,YAElDC,OAAM,SAAAC,GAAG,OAAGH,QAAQC,IAAIE,MACxBV,KAAKO,QAAQC,IAAI,UAjDlB,EAAKX,MAAM,CACPL,YAAY,GACZc,cAAc,IAGlB,EAAKrB,aAAe,EAAKA,aAAa0B,KAAlB,gBACpB,EAAKhB,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKlB,eAAiB,EAAKA,eAAL,gBATR,E,uDA4BPmB,GAAI,IAAD,OACVC,KAAKtB,UAAS,SAACM,GAAD,mBAAC,eACRA,GADO,IAEVS,cAAe,EAAKT,MAAMS,cAAcQ,QAAO,SAAC9C,GAAD,OAAQA,EAAGI,SAAWwC,Y,+BA0BzE,OAAM,yBAAK1C,UAAU,uCACjB,kBAACD,EAAA,EAAD,CAAKC,UAAU,iDACX,2BAAOA,UAAU,yCAAyC6C,KAAK,OAAOC,YAAY,uBAAuBC,SAAUJ,KAAK5B,eACxH,kBAACN,EAAA,EAAD,CAAQoC,KAAK,SAAQ7C,UAAU,wDAC/BW,QAASgC,KAAKlB,cADd,WAGJ,yBAAKzB,UAAU,UACX,kBAAC,EAAD,CAAcL,MAAOgD,KAAKhB,MAAMS,cAAexB,WAAY+B,KAAK/B,WAAW6B,KAAKE,c,GAjExEK,IAAMC,WCZfC,MATf,WACE,OAEI,kBAAC,EAAD,CAAKlD,UAAU,eCGDmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.ebf9fa76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Button, Col, Row, Badge} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\nimport _ from 'lodash';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {IoIosTrash} from 'react-icons/io';\r\nconst MovieResults=(props)=>{\r\n    const movies = props;\r\n    const results = movies.props.map((mr) =>\r\n    \r\n        <Row className='row col-10 col-sm-6 offset-1 offset-sm-3 rounded container justify-content-center border border-warning mt-4' key={mr.imdbID}>\r\n            <Col className='col-10 col-sm-6 py-4'><img className='text-light img-fluid w-75'src={mr.Poster} alt='Poster not available'/></Col>\r\n            <Col className='col-10  col-sm-6 my-4 container'><h5 className='text-warning col-12'>{mr.Title}<h5 className='text-light'>({mr.Year})</h5></h5>\r\n            <Button  fluid className='btn container btn-danger btn-block ml-3 my-1 w-75'onClick={() => props.removeItem(mr.imdbID)}><p className='font-weight-bold font-sz'>Remove<IoIosTrash size={26}></IoIosTrash></p></Button>\r\n            \r\n            \r\n            </Col>\r\n            \r\n        </Row>\r\n\r\n\r\n    );\r\n    return(\r\n        <div>{results}</div>\r\n    )\r\n}\r\nclass searchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            searchValue:'',\r\n            searchResults:[]\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress(this);\r\n        \r\n    }\r\n\r\n    handleChange=(event)=>{\r\n        var searchTerm='';\r\n        for (var chr in event.target.value){\r\n            if(event.target.value[chr] === ' '){\r\n                searchTerm+='+'; \r\n             }else{\r\n            searchTerm+=event.target.value[chr];\r\n            }  \r\n        }\r\n        \r\n        this.setState({searchValue: searchTerm});\r\n        \r\n\r\n    }\r\n\r\n    removeItem(id){\r\n        this.setState((state)=> ({\r\n            ...state,\r\n            searchResults: this.state.searchResults.filter((mr )=> mr.imdbID !== id) \r\n        }))\r\n    }\r\n    handleKeyPress=(event)=>{\r\n        \r\n        if (event.key ==='Enter'){\r\n            event.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        var search = this.state.searchValue;\r\n        axios.get('https://www.omdbapi.com/?apikey=1c223fba&s='+search)\r\n        .then(response => { \r\n          var data=  _.uniqBy(response.data.Search, 'imdbID' );            \r\n            this.setState({searchResults:data},console.log('done'));\r\n        })\r\n        .catch(err=> console.log(err))\r\n        .then(console.log('done'));   \r\n    }\r\n\r\n    \r\n    render(){\r\n\r\n        return<div className='pl-3 bg-dark justify-content-center'>\r\n            <Row className='justify-content-center col-md-12 pt-3 bg-dark'>\r\n                <input className=\"col-6 input-group-text input-group-lg \" type=\"text\" placeholder='search for movies...' onChange={this.handleChange} />\r\n                <Button type='submit'className='btn btn-size mx-3 btn-outline-warning btn-transparent' \r\n                onClick={this.handleSubmit}>Search</Button>\r\n            </Row>\r\n            <div className='col-12'>\r\n                <MovieResults props={this.state.searchResults} removeItem={this.removeItem.bind(this)}/>\r\n            </div>\r\n            \r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default searchBar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Bar from './components/searchBar.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    \n      <Bar className='container'/>\n      \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}